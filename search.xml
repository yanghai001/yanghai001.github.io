<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>笔记：django开发blog系统</title>
      <link href="2021/041037708.html"/>
      <url>2021/041037708.html</url>
      
        <content type="html"><![CDATA[<p>最近在python学习网学习黑马程序员的<a href="https://www.py.cn/course/1091.html">从0开发一个Django博客系统</a><br>，以下是学习过程中的笔记，以便后续复习。<br><a href="https://pan.baidu.com/s/1ViTAqRp-pQDQ3PrEt8QD8A">配套资料</a>  提取码: 29bu</p><hr><h3 id="一、环境安装和项目创建"><a href="#一、环境安装和项目创建" class="headerlink" title="一、环境安装和项目创建"></a>一、环境安装和项目创建</h3><h4 id="1-GitHub远程仓库的创建"><a href="#1-GitHub远程仓库的创建" class="headerlink" title="1.GitHub远程仓库的创建"></a>1.GitHub远程仓库的创建</h4><p>新建1个仓库<br>在“Repository name”中输入“blog”<br>在“Description”中输入“黑马程序员-python-django从0开发一个博客系统”<br>选择”public“<br>勾选”add.gitignore”,并设置为”python“<br>勾选“choose a license”,并设置为”MIT license”  </p><h4 id="2-远程仓库同步到本地"><a href="#2-远程仓库同步到本地" class="headerlink" title="2.远程仓库同步到本地"></a>2.远程仓库同步到本地</h4><p>要想同步仓库，需要安装git程序，参考下载安装教程: <a href="https://zhuanlan.zhihu.com/p/137448719#:~:text=%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91Git%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%201%20%E7%82%B9%E5%87%BBWindows%202%20%E7%82%B9%E5%87%BB%2064-bit%20Git%20for,%E5%92%8C%20G%20...%206%20%E6%9F%A5%E7%9C%8BGit%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F%20%E6%89%93%E5%BC%80cmd%E7%AA%97%E5%8F%A3%20%28win%2Br%E8%BE%93%E5%85%A5%20">Git下载、安装</a><br>值得注意的是从官网下载git很慢，可以从 <a href="https://npm.taobao.org/mirrors/git-for-windows/">淘宝镜像</a> 中选择需要的版本下载，推荐下载最新版本<br>程序安装好之后，打开cmd程序并切换到合适的路径，使用以下命令进行仓库的同步：</p><pre><code>git clone 你的仓库地址    </code></pre><p>注意：如果遇到”fatal: Could not read from remote repository“错误，是因为SSH key方面的问题导致的，解决方法参照<a href="https://blog.csdn.net/weixin_40922744/article/details/107576748">解决 “fatal: Could not read from remote repository.“</a></p><h4 id="3-python和pycharm安装"><a href="#3-python和pycharm安装" class="headerlink" title="3.python和pycharm安装"></a>3.python和pycharm安装</h4><p>python直接从官网下载很忙，建议从<a href="https://repo.huaweicloud.com/python/">华为python镜像</a> 中选择需要的版本下载<br>pycharm的话直接从官网下载即可，有专业版和社区版之分，社区版完全免费，但是学习django的话建议使用专业版，至于激活问题自行百度<br>具体的安装教程，参照：<a href="https://www.sohu.com/a/337364638_120255642">超详细Python与PyCharm安装教程，看这一篇就够了</a></p><h4 id="4-设置pip加速"><a href="#4-设置pip加速" class="headerlink" title="4.设置pip加速"></a>4.设置pip加速</h4><p>安装python3以后，是自带了pip安装工具的，可以在cmd命令行中使用pip3 -V验证是否安装程序：  </p><pre><code>pip3 -V</code></pre><p>如果出现“ModuleNotFoundError: No module named ‘pip’”错误，参照<a href="https://blog.csdn.net/wwangfabei1989/article/details/80107147">解决 ModuleNotFoundError: No module named ‘pip’</a>使用以下命令升级一下pip安装工具即可：</p><pre><code>python -m ensurepippython -m pip install --upgrade pip</code></pre><p>默认的下载地址下载很慢，安装第三方库的时候经常超时出错，所以需要设置pip加速。<br>我个人笔记喜欢使用华为镜像加速，使用以下命令设置pip源进行加速：</p><pre><code>pip3 config set global.index-url https://repo.huaweicloud.com/repository/pypi/simple</code></pre><h4 id="5-创建虚拟环境"><a href="#5-创建虚拟环境" class="headerlink" title="5.创建虚拟环境"></a>5.创建虚拟环境</h4><p>可以参照<a href="https://www.cnblogs.com/shyern/p/11284127.html">Python创建虚拟环境</a> 创建虚拟环境，下面我们用命令行的方法创建：<br>①安装虚拟环境的第三方包 virtualenv：</p><pre><code>pip3 install virtualenv</code></pre><p>②创建虚拟环境<br>先cd到存放虚拟环境的地址，使用”virtualenv 环境名“创建虚拟环境，下面我们在桌面创建一个名为blog_env的虚拟环境：  </p><pre><code>cd desktopvirtualenv blog_env</code></pre><p>③激活虚拟环境:<br>    cd blog_env/Scripts # 跳转到虚拟环境的文件夹<br>    activate # 激活虚拟环境<br>    pip list 查看当前虚拟环境下所安装的第三方库<br>    deactivate 退出虚拟环境<br>    要删除虚拟环境，直接删除虚拟环境所在目录即可</p><pre><code>cd blog_env/Scriptsactivate</code></pre><h4 id="6-虚拟环境中安装django框架"><a href="#6-虚拟环境中安装django框架" class="headerlink" title="6.虚拟环境中安装django框架"></a>6.虚拟环境中安装django框架</h4><p>激活虚拟环境后，使用以下命令安装django:  </p><pre><code>pip3 install django</code></pre><p>注意：可以指定版本安装，如pip3 install django==2.2.10</p><h4 id="7-创建django工程"><a href="#7-创建django工程" class="headerlink" title="7.创建django工程"></a>7.创建django工程</h4><p>先cd到本地仓库文件夹  </p><pre><code>cd ..cd ..cd blog</code></pre><p>创建工程</p><pre><code>django-admin stratproject blog</code></pre><p>可以看到本地仓库文件夹内多了个blog工程文件夹，进入到工程文件夹中  </p><pre><code>cd blog</code></pre><p>启动django工程</p><pre><code>python manage.py runserver</code></pre><p>看到“Starting development server at <a href="http://127.0.0.1:8000/%E2%80%9D">http://127.0.0.1:8000/”</a> 字样说明启动成功，在浏览器中输入“127.0.0.1:8000”即可看到django的欢迎界面，说明工程创建成功<br>这时候可以按ctrl+C停止工程</p><h4 id="8-本地仓库同步到远程仓库"><a href="#8-本地仓库同步到远程仓库" class="headerlink" title="8.本地仓库同步到远程仓库"></a>8.本地仓库同步到远程仓库</h4><p>先cd到本地仓库文件夹</p><pre><code>cd ..</code></pre><p>将所有文件加入追踪清单</p><pre><code>git add .</code></pre><p>提交清单</p><pre><code>git commit -m &quot;CreateProject&quot;</code></pre><p>注意：第一次提交会出现错误“Author identity unknown”，需要先设置邮箱和用户名：</p><pre><code>git config --global user.email &quot;you@example.com&quot;git config --global user.name &quot;Your Name&quot;</code></pre><p>推送清单（需要输入SSH key的密码）</p><pre><code>git push</code></pre><p>稍等一会，即可在远程仓库中看到工程文件，整个工程创建完成。</p><h3 id="二、相关配置"><a href="#二、相关配置" class="headerlink" title="二、相关配置"></a>二、相关配置</h3><h4 id="1-pycharm配置解释器"><a href="#1-pycharm配置解释器" class="headerlink" title="1.pycharm配置解释器"></a>1.pycharm配置解释器</h4><p>用pycharm打开blog工程文件夹,并设置python解释器（选择blog_env/scripts中的python.exe)</p><h4 id="2-django配置日志器"><a href="#2-django配置日志器" class="headerlink" title="2.django配置日志器"></a>2.django配置日志器</h4><p>参照教程配置日志器：<a href="https://blog.csdn.net/JunChow520/article/details/108748758">Django日志配置</a></p><h4 id="3-redis数据库配置"><a href="#3-redis数据库配置" class="headerlink" title="3.redis数据库配置"></a>3.redis数据库配置</h4><p><a href="https://www.cnblogs.com/888888CN/p/9519590.html#:~:text=1%E3%80%81%E8%A6%81%E5%AE%89%E8%A3%85Redis%EF%BC%8C%E9%A6%96%E5%85%88%E8%A6%81%E8%8E%B7%E5%8F%96%E5%AE%89%E8%A3%85%E5%8C%85%E3%80%82.%20Windows%E7%9A%84Redis%E5%AE%89%E8%A3%85%E5%8C%85%E9%9C%80%E8%A6%81%E5%88%B0%E4%BB%A5%E4%B8%8BGitHub%E9%93%BE%E6%8E%A5%E6%89%BE%E5%88%B0%E3%80%82.%20%E9%93%BE%E6%8E%A5%EF%BC%9A%20https%3A%2F%2Fgithub.com%2FMSOpenTech%2Fredis%20%E3%80%82.,%E6%89%93%E5%BC%80%E7%BD%91%E7%AB%99%E5%90%8E%EF%BC%8C%E6%89%BE%E5%88%B0Release%EF%BC%8C%E7%82%B9%E5%87%BB%E5%89%8D%E5%BE%80%E4%B8%8B%E8%BD%BD%E9%A1%B5%E9%9D%A2%E3%80%82.%202%E3%80%81%E5%9C%A8%E4%B8%8B%E8%BD%BD%E7%BD%91%E9%A1%B5%E4%B8%AD%EF%BC%8C%E6%89%BE%E5%88%B0%E6%9C%80%E5%90%8E%E5%8F%91%E8%A1%8C%E7%9A%84%E7%89%88%E6%9C%AC%EF%BC%88%E6%AD%A4%E5%A4%84%E6%98%AF3.2.100%EF%BC%89%E3%80%82.%20%E6%89%BE%E5%88%B0Redis-x64-3.2.100.msi%E5%92%8CRedis-x64-3.2.100.zip%EF%BC%8C%E7%82%B9%E5%87%BB%E4%B8%8B%E8%BD%BD%E3%80%82.%20%E8%BF%99%E9%87%8C%E8%AF%B4%E6%98%8E%E4%B8%80%E4%B8%8B%EF%BC%8C%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%98%AFmsi%E5%BE%AE%E8%BD%AF%E6%A0%BC%E5%BC%8F%E7%9A%84%E5%AE%89%E8%A3%85%E5%8C%85%EF%BC%8C%E7%AC%AC%E4%BA%8C%E4%B8%AA%E6%98%AF%E5%8E%8B%E7%BC%A9%E5%8C%85%E3%80%82.%203%E3%80%81%E5%8F%8C%E5%87%BB%E5%88%9A%E4%B8%8B%E8%BD%BD%E5%A5%BD%E7%9A%84msi%E6%A0%BC%E5%BC%8F%E7%9A%84%E5%AE%89%E8%A3%85%E5%8C%85%EF%BC%88Redis-x64-3.2.100.msi%EF%BC%89%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%85%E3%80%82.%204%E3%80%81%E9%80%89%E6%8B%A9%E2%80%9C%E5%90%8C%E6%84%8F%E5%8D%8F%E8%AE%AE%E2%80%9D%EF%BC%8C%E7%82%B9%E5%87%BB%E4%B8%8B%E4%B8%80%E6%AD%A5%E7%BB%A7%E7%BB%AD%E3%80%82.">windows下redis安装教程</a><br>设置密码这步我没有做</p><!--以下方法被注释掉：    * 安装django-redis库（[库的相关文档](https://django-redis-chs.readthedocs.io/zh_CN/latest/) ）      先进入虚拟环境，然后使用以下命令安装django-redis库：                    pip3 install django-redis--><ul><li>配置redis数据库<br>  打开settings.py文件，插入以下配置内容：<pre><code>  CACHES = &#123;      &quot;default&quot;: &#123; # 默认          &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,          &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/0&quot;,          &quot;OPTIONS&quot;: &#123;              &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,          &#125;      &#125;,      &quot;session&quot;: &#123; # session          &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,          &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/1&quot;,          &quot;OPTIONS&quot;: &#123;              &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,          &#125;      &#125;,  &#125;  SESSION_ENGINE = &quot;django.contrib.sessions.backends.cache&quot;  SESSION_CACHE_ALIAS = &quot;session&quot;           </code></pre> 相关解释如下：  <pre><code>  default：默认的Redis配置项，采用0号Redis库。    session：状态保持的Redis配置项，采用1号Redis库。    SESSION_ENGINE：修改session存储机制使用Redis保存。    SESSION_CACHE_ALIAS：使用名为&quot;session&quot;的Redis配置项存储session数据。  </code></pre>  配置完成后：运行程序，测试结果。</li></ul><h3 id="三、注册功能"><a href="#三、注册功能" class="headerlink" title="三、注册功能"></a>三、注册功能</h3><h4 id="1-注册页面展示"><a href="#1-注册页面展示" class="headerlink" title="1.注册页面展示"></a>1.注册页面展示</h4><h5 id="1-注册用户模块应用"><a href="#1-注册用户模块应用" class="headerlink" title="1.注册用户模块应用"></a>1.注册用户模块应用</h5><p>cd到虚拟环境文件夹并激活虚拟环境，然后cd到blog工程文件夹(manage.py文件所在目录) ,然后使用以下命令创建users模块app </p><pre><code>python manage.py startapp users</code></pre><p>打开settings.py文件，在INSTALLED_APPS列表中加入’users.apps.UsersConfig’  </p><h5 id="2-创建并配置templates模板路径"><a href="#2-创建并配置templates模板路径" class="headerlink" title="2.创建并配置templates模板路径"></a>2.创建并配置templates模板路径</h5><p>在manage.py所在文件夹中创建一个文件夹，命名为templates<br>打开settings.py文件，在TEMPLATES的’DIRS’列表中加入’os.path.join(BASE_DIR,’templates’)’,结果如下：  </p><pre><code>TEMPLATES = [    &#123;        &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,        &#39;DIRS&#39;: [os.path.join(BASE_DIR,&#39;templates&#39;)], #在此行加入        &#39;APP_DIRS&#39;: True,        &#39;OPTIONS&#39;: &#123;            &#39;context_processors&#39;: [                &#39;django.template.context_processors.debug&#39;,                &#39;django.template.context_processors.request&#39;,                &#39;django.contrib.auth.context_processors.auth&#39;,                &#39;django.contrib.messages.context_processors.messages&#39;,            ],        &#125;,    &#125;,]</code></pre><h5 id="3-定义用户注册视图"><a href="#3-定义用户注册视图" class="headerlink" title="3.定义用户注册视图"></a>3.定义用户注册视图</h5><p>把配套资料static文件夹中的register.html文件复制到templates文件夹中<br>打开users app文件夹中views.py文件，添加以下代码，定义一个名为RegisterView的视图，继承django的View类  </p><pre><code>from django.shortcuts import renderfrom django.views import Viewclass RegisterView(View):    def get(self,request):        return  render(request,&#39;register.html&#39;)</code></pre><h5 id="4-定义app子路由和配置主路由"><a href="#4-定义app子路由和配置主路由" class="headerlink" title="4.定义app子路由和配置主路由"></a>4.定义app子路由和配置主路由</h5><p>在users app中新建urls.py文件，作为app的子路由<br>打开新建的urls.py文件，添加以下代码：  </p><pre><code>from django.urls import pathfrom users.views import RegisterViewurlpatterns = [    path(&#39;register/&#39;, RegisterView.as_view(),name=&#39;register&#39;),]</code></pre><p>name=’register’是定义了一个别名<br>打开blog工程中的urls.py文件，从django.urls导入include方法，  </p><pre><code>from django.urls import include</code></pre><p>然后在urlpatterns中增加一行路由引导参数，并定义命名空间为跟app名字一样的’users’：  </p><pre><code>path(&#39;&#39;,include((&#39;users.urls&#39;,&#39;users&#39;),namespace=&#39;users&#39;))</code></pre><h5 id="5-修改register-html模板中静态文件路径"><a href="#5-修改register-html模板中静态文件路径" class="headerlink" title="5.修改register.html模板中静态文件路径"></a>5.修改register.html模板中静态文件路径</h5><p>register.html文件中目前采用的是相对路径来访问本地的css,js,图片等资源，需要修改一下保证能正常访问<br>先在header中插入以下代码加载static路径，好处是static文件夹发生了位置变更时只有在setting.py文件中重新修改static的路径设置即可  </p><pre><code>&#123;% load static %&#125;</code></pre><p>然后修改对于的文件路径：  </p><pre><code>&lt;!-- 引入bootstrap的css文件 --&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;% static 'bootstrap/css/bootstrap.min.css' %&#125;&quot;&gt;&lt;!-- 引入vuejs --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;&#123;% static 'js/vue-2.5.16.js' %&#125;&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;&#123;% static 'js/axios-0.18.0.min.js' %&#125;&quot;&gt;&lt;/script&gt;&lt;!-- 读入图片验证码图片 --&gt;&lt;img src=&quot;&#123;% static 'img/image_code.png' %&#125;&quot; @click=&quot;generate_image_code&quot; alt=&quot;&quot; style=&quot;width: 110px;height: 40px;&quot;&gt;&lt;!-- 引入js --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;&#123;% static 'js/host.js' %&#125;&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;&#123;% static 'js/common.js' %&#125;&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;&#123;% static 'js/register.js' %&#125;&quot;&gt;&lt;/script&gt;</code></pre><p>然后重新启动server服务，在浏览器中访问127.0.0.1：8000，可以看到注册页面正常了  </p><h4 id="2-自定义用户模型类"><a href="#2-自定义用户模型类" class="headerlink" title="2.自定义用户模型类"></a>2.自定义用户模型类</h4><h5 id="1-Django默认用户认证系统"><a href="#1-Django默认用户认证系统" class="headerlink" title="1.Django默认用户认证系统"></a>1.Django默认用户认证系统</h5><ul><li>Django自带用户认证系统<br>  它处理用户账号、组、权限以及基于cookie的用户会话。</li><li>Django认证系统位置<br>  django.contrib.auth包含认证框架的核心和默认的模型。</li><li>Django认证系统同时处理认证和授权<br>  认证：验证一个用户是否它声称的那个人，可用于账号登录。<br>  授权：授权决定一个通过了认证的用户被允许做什么。</li><li>Django认证系统包含的内容<br>  用户：用户模型类、用户认证。<br>  权限：标识一个用户是否可以做一个特定的任务，MIS系统常用到。<br>  组：对多个具有相同权限的用户进行统一管理，MIS系统常用到。<br>  密码：一个可配置的密码哈希系统，设置密码、密码校验。  </li></ul><h5 id="2-Django默认用户模型类"><a href="#2-Django默认用户模型类" class="headerlink" title="2.Django默认用户模型类"></a>2.Django默认用户模型类</h5><ul><li>Django认证系统中提供了用户模型类User保存用户的数据。  <ul><li>User对象是认证系统的核心。  </li></ul></li><li>Django认证系统用户模型类位置:  <ul><li>django.contrib.auth.models.User</li></ul></li></ul><pre><code>class User(AbstractUser):  &quot;&quot;&quot;User within the Django authentication system are represented by this model.Username and Password ard required, other fields are optinal&quot;&quot;&quot;    class Meta(AbstractUser.Meta):        swappable = &#39;AUTH_USER_MODEL&#39;                  </code></pre><ul><li>父类AbstractUser介绍  <ul><li>User对象基本属性<br>  创建用户必选：username、password<br>  创建用户可选：email、first_name、last_name、last_login、date_joined、is_active 、is_staff、is_superuse<br>  判断用户是否通过认证：is_authenticated<br>  USERNAME_FIELD:可以修改用户名认证字段  </li><li>创建用户的方法<br>  user = User.objects.create_user(username, password, **extra_fields)</li><li>用户认证的方法<br>  from django.contrib.auth import authenticate<br>  user = authenticate(username=username, password=password, **kwargs)</li><li>处理密码的方法<br>  设置密码：set_password(raw_password)<br>  校验密码：check_password(raw_password)  </li></ul></li></ul><h5 id="3-自定义用户模型"><a href="#3-自定义用户模型" class="headerlink" title="3. 自定义用户模型"></a>3. 自定义用户模型</h5><ul><li>为什么要自定义用户模型类？<ul><li>观察注册界面会发现，个人博客注册页面中必须有手机号，而且在登录页面中也使用手机号进行认证。此外个人中心页面中有个人头像和个人简介字段。</li><li>但是Django默认用户模型类中没有这些字段，所以要自定义用户模型类。</li></ul></li><li>如何自定义用户模型类？<ul><li>继承自AbstractUser（可通过阅读Django默认用户模型类的源码得知） 。</li><li>新增手机号字段，头像字段和简介字段。 </li></ul></li></ul><p>打开users应用下的models.py文件，并在其中创建User类，继承自AbstractUser类：</p><pre><code>from django.db import modelsfrom django.contrib.auth.models import AbstractUser# 用户信息class User(AbstractUser):    # 电话号码字段    # unique 为唯一性字段    mobile = models.CharField(max_length=20, unique=True,blank=False)    # 头像    # upload_to为保存到响应的子目录中    avatar = models.ImageField(upload_to=&#39;avatar/%Y%m%d/&#39;, blank=True)    # 个人简介    user_desc = models.TextField(max_length=500, blank=True)    # 内部类 class Meta 用于给 model 定义元数据    class Meta:        db_table=&#39;tb_user&#39;              #修改默认的表名        verbose_name=&#39;用户信息&#39;         # Admin后台显示        verbose_name_plural=verbose_name # Admin后台显示    def __str__(self):        return self.mobile        </code></pre><p>打开settings.py文件，在最后插入以下内容，替换系统默认的user类，具体可参考<a href="https://docs.djangoproject.com/en/2.2/topics/auth/customizing/#auth-custom-user">django文档</a> ：</p><pre><code># 替换系统的user模型类，改为我们自定义的user模型# 配置信息为 &#39;子应用.模型类名&#39;AUTH_USER_MODEL = &#39;users.User&#39;</code></pre><h5 id="4-安装Pillow库"><a href="#4-安装Pillow库" class="headerlink" title="4.安装Pillow库"></a>4.安装Pillow库</h5><p>如果这时我们启动server，会出现以下错误：  </p><pre><code>ERRORS:  users.User.avatar: (fields.E210) Cannot use ImageField because Pillow is not installed.  HINT: Get Pillow at https://pypi.org/project/Pillow/ or run command &quot;python -m pip install Pillow&quot;</code></pre><p>这是因为我们定义user模型类时用到了Imagefiled，继承自pillow库，所以需要使用以下命令安装pillow库（记得切换到虚拟环境状态）：  </p><pre><code>python -m pip install Pillow</code></pre><h5 id="5-迁移用户模型类"><a href="#5-迁移用户模型类" class="headerlink" title="5.迁移用户模型类"></a>5.迁移用户模型类</h5><ul><li>创建迁移文件（务必在设置AUTH_USER_MODEL配置后）</li></ul><pre><code>python manage.py makemigrations</code></pre><ul><li>执行迁移</li></ul><pre><code>python manage.py migrate</code></pre><h4 id="4-实现图片验证码"><a href="#4-实现图片验证码" class="headerlink" title="4.实现图片验证码"></a>4.实现图片验证码</h4>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> github </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记：站点部署记录</title>
      <link href="2021/040537708.html"/>
      <url>2021/040537708.html</url>
      
        <content type="html"><![CDATA[<p>本来打算使用django部署一个属于自己的站点，奈何在腾讯云上部署站点一直不成功，然后发现了nodejs+hexo+github快速部署自己的博客站点的方法，后续再看看能不能扩展其他功能，比如书籍、音乐、视频推荐等。</p><p>以下记录本站点部署的过程。</p><hr><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p><a href="https://www.bilibili.com/video/BV1je41147Ma?p=2">github+nodejs+git环境安装</a><br>1.github注册账号，并创建一个仓库，仓库的命名是：(你的用户名).github.io,如yanghai001.github.io<br>2.下载安装nodejs,参考教程：<a href="https://blog.csdn.net/qq_43285335/article/details/90696126">nodejs下载安装及配置环境</a><br>3.下载安装git,参考教程：<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">Windows系统Git安装教程（详解Git安装过程）</a></p><h3 id="使用hexo创建和部署网站"><a href="#使用hexo创建和部署网站" class="headerlink" title="使用hexo创建和部署网站"></a>使用hexo创建和部署网站</h3><p><a href="https://hexoscript.gitbook.io/hexo-script/v/1.3-1/shi-yong-bu-zhou/yi-jian-bu-shu-hexo-bo-ke">hexo快速创建和部署网站（按步骤进行）</a>，参照视频教程：<br><a href="https://www.bilibili.com/video/BV1je41147Ma?p=4">第一部分</a><br><a href="https://www.bilibili.com/video/BV1je41147Ma?p=3">第二部分</a></p><h3 id="更换和安装主题"><a href="#更换和安装主题" class="headerlink" title="更换和安装主题"></a>更换和安装主题</h3><p><a href="https://zhuanlan.zhihu.com/p/22735619">文字教程</a><br><a href="https://www.bilibili.com/video/BV1je41147Ma?p=7">视频教程</a></p><h3 id="网站更新"><a href="#网站更新" class="headerlink" title="网站更新"></a>网站更新</h3><p>部署完成后若需要更新文件，使用以下命令上传文件到github后，重新访问网站即可看到更新的内容</p><pre class=" language-bash"><code class="language-bash">$ hexo g -d</code></pre><h3 id="matery主题说明"><a href="#matery主题说明" class="headerlink" title="matery主题说明"></a>matery主题说明</h3><p><a href="https://blog.csdn.net/jspnetcn/article/details/104111651">基于Hexo的matery主题搭建博客并优化</a><br><a href="https://blog.csdn.net/qq_41496127/article/details/108749638">基于Hexo的Matery主题个人博客的部分个性化修改</a><br><a href="https://chen-shang.github.io/2019/08/15/ji-zhu-zong-jie/hexo/hexo-theme-matery-zhu-ti-you-hua/">hexo-theme-matery主题优化</a><br><a href="https://yafine-blog.cn/posts/12b4.html">Hexo+Github 博客搭建之 Matery 主题个性化修改篇（二）</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
            <tag> github </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
